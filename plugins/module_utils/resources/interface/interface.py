# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/kilip/ansible-routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type

from ..base import ResourceBase
from ...utils import parse_config
import re


class InterfaceResource(ResourceBase):
    resource_name = "interface"
    command = "/interface"
    gather_network_resources = ["interface"]
    keys = ["name"]
    type = "config"
    supports = ["facts_verbose_mode"]
    argument_spec = {
        "state": {"choices": ["merged"], "default": "merged", "type": "str"},
        "config": {
            "elements": "dict",
            "type": "list",
            "options": {
                "disabled": {
                    "type": "str",
                    "choices": ["yes", "no"],
                    "default": "no",
                },
                "l2mtu": {"type": "int"},
                "mtu": {"type": "int"},
                "name": {"type": "str", "required": True},
                "comment": {"type": "str"},
            },
        },
    }

    supported_interfaces = ["interface", "ethernet", "vlan", "bridge"]

    def render_config(self, spec, conf):
        sp = re.split("set |add ", conf)
        intype = sp[0].strip()
        if intype not in self.supported_interfaces:
            return None
        del sp[0]

        configs = []
        for conf in sp:
            config = parse_config(
                spec, conf, self.facts_argument_spec, self.prefixes
            )
            config["type"] = intype
            if config:
                configs.append(config)
        return configs
