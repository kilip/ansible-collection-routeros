#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/ansible-routeros-generator
#
# ----------------------------------------------------------------------------
from __future__ import absolute_import, division, print_function

__metaclass__ = type


"""
The module file for ros_capsman_manager
"""

DOCUMENTATION = """
module: ros_capsman_manager
author: Anthonius Munthi (@kilip)
short_description: CAPsMan Manager Setting Module
description:
- This modules manages CAPsMan Maanager Setting on Mikrotik RouterOS network devices
version_added: 1.0.0
options:
  state:
    type: str
    choices: ["present","reset"]
    description: Set module state
    default: present
  config:
    description: A dictionary of `/caps-man manager` parameters
    type: dict
    suboptions:
        ca_certificate:
          type: str
          default: "none"
          description: |
            Device CA certificate

        certificate:
          type: str
          choices:
            - 'auto'
            - 'certificate name'
            - 'none'
          default: "none"
          description: |
            Device certificate

        enabled:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Disable or enable CAPsMAN functionality

        package_path:
          type: str

          description: |
            Folder location for the RouterOS packages. For example, use '/upgrade' to
            specify the upgrade folder from the files section. If empty string is set,
            CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs
            with the same architecture as CAPsMAN will be upgraded.

        require_peer_certificate:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Require all connecting CAPs to have a valid certificate

        upgrade_policy:
          type: str
          choices:
            - 'none'
            - 'require-same-version'
            - 'suggest-same-upgrade'
          default: "none"
          description: |
            Upgrade policy options
            - none - do not perform upgrade
            - require-same-version - CAPsMAN suggest to upgrade the CAP RouterOS version and
              if it fails it will not provision the CAP. (Manual provision is still possible)
            - suggest-same-version - CAPsMAN suggests to upgrade the CAP RouterOS version
              and if it fails it will still be provisioned

"""

EXAMPLES = """
# ----
# Using Present State
# ----
# before:
# [admin@MikroTik] > /caps-man manager export verbose
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /caps-man manager
# set ca-certificate=none \
#     certificate=none \
#     enabled=no \
#     package-path="" \
#     require-peer-certificate=no \
#     upgrade-policy=none
#
# configuration:
- name: Update Settings
  kilip.routeros.ros_capsman_manager:
    state: present
    config:
      ca_certificate: auto
      enabled: 'yes'

#
# after:
# [admin@MikroTik] > /caps-man manager export verbose
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /caps-man manager
# set ca-certificate=none \
#     certificate=auto \
#     enabled=yes \
#     package-path="" \
#     require-peer-certificate=no \
#     upgrade-policy=none
"""

RETURN = """
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['/interface bridge add name=sample']
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.capsman.capsman_manager import (
    CapsmanManagerResource,
)
from ..module_utils.config.setting import Setting


def main():
    module = AnsibleModule(argument_spec=CapsmanManagerResource.argument_spec)
    result = Setting(module, CapsmanManagerResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
