#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
module: ros_capsman_manager
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
short_description: CAPsMan Manager Setting Module
description:
  - This modules manages CAPsMan Maanager Setting on Mikrotik RouterOS network devices
supports:
  - export-verbose-mode
options:
  state:
    choices:
      - present
      - reset
    default: present
    description: Set state for this module
  config:
    type: dict
    suboptions:
      ca_certificate:
        type: str
        description: Device CA certificate
      certificate:
        type: str
        choices:
          - auto
          - certificate name
          - none
        description: Device certificate
      enabled:
        type: bool
        default: False
        description: Disable or enable CAPsMAN functionality
      package_path:
        type: str
        description: Folder location for the RouterOS packages. For example, use "/upgrade" to specify the upgrade folder from the files section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
      require_peer_certificate:
        type: bool
        default: False
        description: Require all connecting CAPs to have a valid certificate
      upgrade_policy:
        type: str
        choices:
          - none
          - require-same-version
          - suggest-same-upgrade
        description: |
          Upgrade policy options
          - none - do not perform upgrade
          - require-same-version - CAPsMAN suggest to upgrade the CAP RouterOS version and if it fails it will not provision the CAP. (Manual provision is still possible)
          - suggest-same-version - CAPsMAN suggests to upgrade the CAP RouterOS version and if it fails it will still be provisioned
"""

EXAMPLES = """
# Using Present State
#
# before state:
# [admin@MikroTik] > /caps-man manager export
# /caps-man manager
# set ca-certificate=none certificate=none enabled=no require-peer-certificate=no upgrade-policy=none
#
- name: Update Settings
  kilip.routeros.ros_capsman_manager:
    state: present
    config:
      ca_certificate: auto
      enabled: yes
#
# after state:
# [admin@MikroTik] > /caps-man manager export
# # RouterOS Output
# #
# /caps-man manager
# set ca-certificate=auto enabled=yes
#
#
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.capsman.capsman_manager import (
    CapsmanManagerResource,
)
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=CapsmanManagerResource.argument_spec)
    result = Config(module, CapsmanManagerResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
