#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
module: ros_capsman_datapath
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
short_description: CAPsMan DataPath Configuration Module
description:
  - This modules manages CAPsMan DataPath Configuration on Mikrotik RouterOS network devices
options:
  state:
    choices:
      - merged
      - replaced
      - overridden
      - deleted
    default: merged
    description: Set state for this module
  config:
    type: list
    elements: dict
    suboptions:
      arp:
        type: str
        choices:
          - disabled
          - enabled
          - proxy-arp
          - reply-only
        default: enabled
        description: |
          Address Resolution Protocol setting
          - C(disabled) - the interface will not use ARP
          - C(enabled) - the interface will use ARP
          - C(proxy-arp) - the interface will use the ARP proxy feature
          - C(reply-only) - the interface will only reply to requests originated from matching IP address/MAC address combinations which are entered as static entries in the L(IP/ARP,https://wiki.mikrotik.com/wiki/Manual:IP/ARP) table. Therefore for communications to be successful, a valid static entry must already exist.
      bridge:
        type: str
        description: |
          Bridge to which particular interface should be automatically added as port. Required only when local-forwarding is not used.
      bridge_cost:
        type: int
        description: |
          bridge port cost to use when adding as bridge port
      bridge_horizon:
        type: int
        description: |
          bridge horizon to use when adding as bridge port
      client_to_client_forwarding:
        type: bool
        default: False
        description: |
          controls if client-to-client forwarding between wireless clients connected to interface should be allowed, in local forwarding mode this function is performed by CAP, otherwise it is performed by CAPsMAN
      comment:
        type: str
        description: Short description of the datapath
      disabled:
        type: bool
        default: False
        description: Set capsman_datapath resource disability
      interface_list:
        type: list
        description: interface list for this datapath
      l2mtu:
        type: str
        description: set Layer2 MTU size
      local_forwarding:
        type: bool
        default: False
        description: |
          Controls forwarding mode. If disabled, all L2 and L3 data will be forwarded to CAPsMAN, and further forwarding decisions will be made only then.
          Note, if disabled, make sure that each CAP interface MAC Address that participates in the same broadcast domain is unique (including local MACs, like Bridge-MAC).
      mtu:
        type: str
        description: set MTU size
      name:
        type: str
        required: True
        description: Name for datapath
      openflow_switch:
        type: str
        description: |
          OpenFlow switch port (when enabled) to add interface to
      vlan_id:
        type: int
        description: |
          VLAN ID to assign to interface if vlan-mode enables use of VLAN tagging
      vlan_mode:
        type: str
        choices:
          - use-service-tag
          - use-tag
        description: |
          Enables and specifies the type of VLAN tag to be assigned to the interface (causes all received data to get tagged with VLAN tag and allows the interface to only send out data tagged with given tag)
"""

EXAMPLES = """
# Using Merged
#
# before state:
# [admin@MikroTik] > /caps-man datapath export
# /caps-man datapath
# add name=test
#
- name: Merge with device configuration
  kilip.routeros.ros_capsman_datapath:
    state: merged
    config:
      - name: test
        bridge: br-trunk
        arp: reply-only
      - name: new
        bridge: br-trunk
        arp: reply-only
#
# after state:
# [admin@MikroTik] > /caps-man datapath export
# # RouterOS Output
# #
# /caps-man datapath
# add arp=reply-only bridge=br-trunk name=test
# add arp=reply-only bridge=br-trunk name=new
#
#
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.capsman.capsman_datapath import (
    CapsmanDatapathResource,
)
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=CapsmanDatapathResource.argument_spec)
    result = Config(module, CapsmanDatapathResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
