#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/kilip/ansible-routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


"""
The module file for ros_bridge_port
"""

DOCUMENTATION = """
module: ros_bridge_port
author: Anthonius Munthi (@kilip)
short_description: Bridge Port Module
description:
- This module manages RouterOS sub menu `/interface bridge port`
options:
  state:
    type: str
    choices: ["merged","replaced","overridden","deleted"]
    description: Set module state
    default: merged
  config:
    description: A dictionary of `/interface bridge port` parameters
    type: list
    elements: dict
    suboptions:
        disabled:
          type: str
          choices:
            - 'yes'
            - 'no'
          default: "no"
          description: |
            Set bridge port disability

        auto_isolate:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            When enabled, prevents a port moving from discarding into forwarding state if no
            BPDUs are received from the neighboring bridge. The port will change into a
            forwarding state only when a BPDU is received. This property only has an effect
            when protocol-mode is set to C(rstp) or C(mstp) and edge is set to C(no).

        bpdu_guard:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables or disables BPDU Guard feature on a port. This feature puts the port in
            a disabled role if it receives a BPDU and requires the port to be manually
            disabled and enabled if a BPDU was received. Should be used to prevent a bridge
            from BPDU related attacks. This property has no effect when protocol-mode is set
            to C(none).

        bridge:
          type: str
          required: True

          description: |
            The bridge interface the respective interface is grouped in.

        broadcast_flood:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "yes"
          description: |
            When enabled, bridge floods broadcast traffic to all bridge egress ports. When
            disabled, drops broadcast traffic on egress ports. Can be used to filter all
            broadcast traffic on an egress port. Broadcast traffic is considered as traffic
            that uses **FF:FF:FF:FF:FF:FF** as destination MAC address, such traffic is
            crucial for many protocols such as DHCP, ARP, NDP, BOOTP (Netinstall) and
            others. This option does not limit traffic flood to the CPU.

        edge:
          type: str
          choices:
            - 'auto'
            - 'no'
            - 'no-discover'
            - 'yes'
            - 'yes-discover'
          default: "auto"
          description: |
            Set port as edge port or non-edge port, or enable edge discovery. Edge ports are
            connected to a LAN that has no other bridges attached. An edge port will skip
            the learning and the listening states in STP and will transition directly to the
            forwarding state, this reduces the STP initialization time. If the port is
            configured to discover edge port then as soon as the bridge detects a BPDU
            coming to an edge port, the port becomes a non-edge port. This property has no
            effect when protocol-mode is set to C(none).
            - C(no) - non-edge port, will participate in learning and listening states in
              STP.
            - C(no-discover) - non-edge port with enabled discovery, will participate in
              learning and listening states in STP, a port can become edge port if no BPDU is
              received.
            - C(yes) - edge port without discovery, will transit directly to forwarding
              state.
            - C(yes-discover) - edge port with enabled discovery, will transit directly to
              forwarding state.
            - C(auto) - same as C(no-discover), but will additionally detect if bridge port is
              a Wireless interface with disabled bridge-mode, such interface will be
              automatically set as an edge port without discovery.

        external_fdb:
          type: str
          choices:
            - 'auto'
            - 'no'
            - 'yes'
          default: "auto"
          description: |
            Whether to use wireless registration table to speed up bridge host learning. If
            there are no Wireless interfaces in a bridge, then setting external-fdb to C(yes)
            will disable MAC learning and the bridge will act as a hub (disables hardware
            offloading). Replaced with learn parameter in RouterOS v6.42

        fast_leave:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables IGMP Fast leave feature on the port. Bridge will stop forwarding traffic
            to a bridge port whenever a IGMP Leave message is received for appropriate
            multicast stream. This property only has effect when igmp-snooping is set to
            C(yes).

        frame_types:
          type: str
          choices:
            - 'admit-all'
            - 'admit-only-untagged-and-priority-tagged'
            - 'admit-only-vlan-tagged'
          default: "admit-all"
          description: |
            Specifies allowed ingress frame types on a bridge port. This property only has
            effect when vlan-filtering is set to C(yes).

        ingress_filtering:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables or disables VLAN ingress filtering, which checks if the ingress port is
            a member of the received VLAN ID in the bridge VLAN table. Should be used with
            frame-types to specify if the ingress traffic should be tagged or untagged. This
            property only has effect when vlan-filtering is set to C(yes).

        learn:
          type: str
          choices:
            - 'auto'
            - 'no'
            - 'yes'
          default: "auto"
          description: |
            Changes MAC learning behaviour on a bridge port
            - C(yes) - enables MAC learning
            - C(no) - disables MAC learning
            - C(auto) - detects if bridge port is a Wireless interface and uses Wireless
              registration table instead of MAC learning, will use Wireless registration table
              if the L(Wireless interface,https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless) is set to one of ap-bridge,bridge,wds-slave mode
              and bridge mode for the L(Wireless interface,https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless) is disabled.

        multicast_router:
          type: str
          choices:
            - 'disabled'
            - 'permanent'
            - 'temporary-query'
          default: "temporary-query"
          description: |
            Changes the state of a bridge port whether IGMP membership reports are going to
            be forwarded to this port. By default IGMP membership reports (most importantly
            IGMP Join messages) are only forwarded to ports that have a multicast router or
            a IGMP Snooping enabled bridge connected to. Without at least one port marked as
            a C(multicast-router) IPTV might not work properly, it can be either detected
            automatically or forced manually.
            - C(disabled) - IGMP membership reports are not forwarded through this port
              regardless what is connected to it.
            - C(permanent) - IGMP membership reports are forwarded through this port
              regardless what is connected to it.
            - C(temporary-query) - automatically detect multicast routers and IGMP Snooping
              enabled bridges.
            You can improve security by forcing ports that have IPTV boxes connected to
            never become ports marked as C(multicast-router). This property only has effect
            when igmp-snooping is set to C(yes).

        horizon:
          type: int
          default: 0
          description: |
            Use split horizon bridging to prevent bridging loops. Set the same value for
            group of ports, to prevent them from sending data to ports with the same horizon
            value. Split horizon is a software feature that disables hardware offloading.
            Read more about L(Bridge split horizon,https://wiki.mikrotik.com/wiki/MPLSVPLS#Split_horizon_bridging).

        internal_path_cost:
          type: int
          default: 10
          description: |
            Path cost to the interface for MSTI0 inside a region. This property only has
            effect when protocol-mode is set to C(mstp).

        interface:
          type: str
          required: True

          description: |
            Name of the interface.

        path_cost:
          type: int
          default: 10
          description: |
            Path cost to the interface, used by STP to determine the "best" path, used by
            MSTP to determine "best" path between regions. This property has no effect when
            protocol-mode is set to C(none).

        point_to_point:
          type: str
          choices:
            - 'auto'
            - 'no'
            - 'yes'
          default: "auto"
          description: |
            Specifies if a bridge port is connected to a bridge using a point-to-point link
            for faster convergence in case of failure. By setting this property to C(yes),
            you are forcing the link to be a point-to-point link, which will skip the
            checking mechanism, which detects and waits BPDUs from other devices from this
            single link, by setting this property to C(no), you are expecting that a link can
            receive BPDUs from multiple devices. By setting the property to C(yes), you are
            significantly improving (R/M)STP convergence time. In general, you should only
            set this property to C(no) if it is possible that another device can be connected
            between a link, this is mostly relevant to Wireless mediums and Ethernet hubs.
            If the Ethernet link is full-duplex, C(auto) enables point-to-point
            functionality. And this property has no effect when protocol-mode is set to
            C(none).

        priority:
          type: int
          default: 128
          description: |
            The priority of the interface, used by STP to determine the root port, used by
            MSTP to determine root port between regions.

        pvid:
          type: int
          default: 1
          description: |
            Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is
            assigned to. This property only has effect when vlan-filtering is set to C(yes).

        restricted_role:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enable the restricted role on a port, used by STP to forbid a port becoming a
            root port. This property only has effect when protocol-mode is set to C(mstp).

        restricted_tcn:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Disable topology change notification (TCN) sending on a port, used by STP to
            forbid network topology changes to propagate. This property only has effect when
            protocol-mode is set to C(mstp).

        tag_stacking:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Forces all packets to be treated as untagged packets. Packets on ingress port
            will be tagged with another VLAN tag regardless if a VLAN tag already exists,
            packets will be tagged with a VLAN ID that matches the pvid value and will use
            EtherType that is specified in ether-type. This property only has effect when
            vlan-filtering is set to C(yes).

        trusted:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            When enabled, it allows to forward DHCP packets towards DHCP server through this
            port. Mainly used to limit unauthorized servers to provide malicious information
            for users. This property only has effect when dhcp-snooping is set to C(yes).

        unknown_multicast_flood:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "yes"
          description: |
            When enabled, bridge floods unknown multicast traffic to all bridge egress
            ports. When disabled, drops unknown multicast traffic on egress ports. Multicast
            addresses that are in C(/interface bridge mdb) are considered as learned
            multicasts and therefore will not be flooded to all ports. Without IGMP Snooping
            all multicast traffic will be dropped on egress ports. Has effect only on an
            egress port. This option does not limit traffic flood to the CPU. Note that
            local multicast addresses (224.0.0.0/24) are not flooded when
            unknown-multicast-flood is disabled, as a result some protocols that rely on
            local multicast addresses might not work properly, such protocols are RIPv2m
            OSPF, mDNS, VRRP and others. Some protocols do send a IGMP join request and
            therefore are compatible with IGMP Snooping, some OSPF implementations are
            compatible with RFC1584, RouterOS OSPF implementation is not compatible with
            IGMP Snooping. This property should only be used when igmp-snooping is set to
            C(yes).

        unknown_unicast_flood:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "yes"
          description: |
            When enabled, bridge floods unknown unicast traffic to all bridge egress ports.
            When disabled, drops unknown unicast traffic on egress ports. If a MAC address
            is not learned in C(/interface bridge host), then the traffic is considered as
            unknown unicast traffic and will be flooded to all ports. MAC address is learnt
            as soon as a packet on a bridge port is received, then the source MAC address is
            added to the bridge host table. Since it is required for the bridge to receive
            at least one packet on the bridge port to learn the MAC address, it is
            recommended to use static bridge host entries to avoid packets being dropped
            until the MAC address has been learnt. Has effect only on an egress port. This
            option does not limit traffic flood to the CPU.

        comment:
          type: str

          description: |
            Give notes for this resource

"""

EXAMPLES = """
# ----
# Merged Configuration
# ----
# before:
#  [admin@MikroTik] > /interface bridge port export
#  /interface bridge port
#  add bridge=br-wan interface=ether1
#  add bridge=br-trunk interface=ether2 disabled=yes
#
- name: Merge configuration with device configuration
  kilip.routeros.ros_bridge_port:
    config:
      - bridge: br-wan
        interface: ether1
        comment: 'new comment'
      - bridge: br-trunk
        interface: ether2
        comment: 'new comment'
    state: merged

# after:
#  [admin@MikroTik] > /interface bridge port export
#  /interface bridge port
#  add bridge=br-wan interface=ether1 comment="new comment"
#  add bridge=br-trunk interface=ether2 comment="new comment"
#
# ----
# Using replaced state
# ----
# before:
#  [admin@MikroTik] > /interface bridge port export
#  /interface bridge port
#  add bridge=br-wan interface=ether1
#  add bridge=br-trunk interface=ether2 disabled=yes
#
- name: Replace device configuration
  kilip.routeros.ros_bridge_port:
    config:
      - bridge: br-wan
        interface: ether1
        comment: 'new comment'
      - bridge: br-trunk
        interface: ether2
        comment: 'new comment'
    state: replaced

# after:
#  [admin@MikroTik] > /interface bridge port export
#  /interfce bridge port
#  add bridge=br-wan interface=ether1 comment="new comment"
#  add bridge=br-trunk interface=ether2 comment="new comment"
#
# ----
# Using overridden state
# ----
# before:
#  [admin@MikroTik] > /interface bridge port export
#  /interface bridge port
#  add bridge=br-wan interface=ether1
#  add bridge=br-trunk interface=ether2 disabled=yes
#
- name: Override device configuration
  kilip.routeros.ros_bridge_port:
    config:
      - bridge: br-new
        interface: ether2
        comment: 'new comment'
    state: overridden

# after:
#  [admin@MikroTik] > /interface bridge port export
#  /interfce bridge port
#  add bridge=br-new interface=ether2 comment="new comment"
#
# ----
# Using deleted state
# ----
# before:
#  [admin@MikroTik] > /interface bridge port export
#  /interface bridge port
#  add bridge=br-wan interface=ether1
#  add bridge=br-trunk interface=ether2 disabled=yes
#
- name: Delete bridge port
  kilip.routeros.ros_bridge_port:
    config:
      - bridge: br-trunk
        interface: ether2
    state: deleted

# after:
#  [admin@MikroTik] > /interface bridge port export
#  /interfce bridge port
#  add bridge=br-wan interface=ether1
#
"""

RETURN = """
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['/interface bridge add name=sample']
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.bridge.bridge_port import BridgePortResource
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=BridgePortResource.argument_spec)
    result = Config(module, BridgePortResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
