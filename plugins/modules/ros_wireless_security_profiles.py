#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
module: ros_wireless_security_profiles
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
short_description: Wireless Security Profiles Module
description:
  - This module manages the Wireless Security Profiles of Mikrotik RouterOS network devices.
options:
  state:
    choices:
      - merged
      - replaced
      - overridden
      - deleted
    default: merged
    description: Set state for this module
  config:
    type: list
    elements: dict
    suboptions:
      authentication_types:
        type: list
        choices:
          - wpa-eap
          - wpa-psk
          - wpa2-eap
          - wpa2-psk
        description: Set of supported authentication types, multiple values can be selected. Access Point will advertise supported authentication types, and client will connect to Access Point only if it supports any of the advertised authentication types.
      comment:
        type: str
        description: Short note for wireless_security_profiles resource
      disable_pmkid:
        type: bool
        default: False
        description: |
          Whether to include PMKID into the EAPOL frame sent out by the Access Point. Disabling PMKID can cause compatibility issues with devices that use the PMKID to connect to an Access Point.
          - C(yes) - removes PMKID from EAPOL frames (improves security, reduces compatibility).
          - C(no) - includes PMKID into EAPOL frames (reduces security, improves compatibility).
          This property only has effect on Access Points.
      disabled:
        type: bool
        default: False
        description: Set wireless_security_profiles resource disability
      eap_methods:
        type: str
        choices:
          - eap-tls
          - eap-ttls-mschapv2
          - passthrough
          - peap
        default: passthrough
        description: |
          Allowed types of authentication methods, multiple values can be selected. This property only has effect on Access Points.
          - C(eap-tls) - Use built-in EAP TLS authentication. Both client and server certificates are supported. See description of **tls-mode** and **tls-certificate** properties.
          - C(eap-ttls-mschapv2) - Use EAP-TTLS with MS-CHAPv2 authentication.
          - C(passthrough) - Access Point will relay authentication process to the RADIUS server.
          - C(peap) - Use Protected EAP authentication.
      group_ciphers:
        type: str
        choices:
          - aes-ccm
          - tkip
        default: aes-ccm
        description: |
          Access Point advertises one of these ciphers, multiple values can be selected. Access Point uses it to encrypt all broadcast and multicast frames. Client attempts connection only to Access Points that use one of the specified group ciphers.
          - C(tkip) - Temporal Key Integrity Protocol - encryption protocol, compatible with legacy WEP equipment, but enhanced to correct some of the WEP flaws.
          - C(aes-ccm) - more secure WPA encryption protocol, based on the reliable AES (Advanced Encryption Standard). Networks free of WEP legacy should use only this cipher.
      group_key_update:
        type: str
        default: 5m
        description: Controls how often Access Point updates the group key. This key is used to encrypt all broadcast and multicast frames. property only has effect for Access Points.
      interim_update:
        type: str
        default: 0
        description: When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies default update interval that can be overridden by the RADIUS server using L(Acct-Interim-Interval, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#RADIUS_MAC_authentication) attribute.
      mode:
        type: str
        choices:
          - dynamic-keys
          - none
          - static-keys-optional
          - static-keys-required
        description: |
          Encryption mode for the security profile.
          - C(none) - Encryption is not used. Encrypted frames are not accepted.
          - C(static-keys-required) - WEP mode. Do not accept and do not send unencrypted frames. Station in *static-keys-required* mode will not connect to an Access Point in *static-keys-optional* mode.
          - C(static-keys-optional) - WEP mode. Support encryption and decryption, but allow also to receive and send unencrypted frames. Device will send unencrypted frames if encryption algorithm is specified as *none*. Station in *static-keys-optional* mode will not connect to an Access Point in *static-keys-required* mode. See also: L(static-sta-private-algo, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#WEP_properties), L(static-transmit-key, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#WEP_properties).
          - C(dynamic-keys) - WPA mode.
      mschapv2_password:
        type: str
        description: Password to use for authentication when *eap-ttls-mschapv2* authentication method is being used. This property only has effect on Stations.
      mschapv2_username:
        type: str
        description: Username to use for authentication when *eap-ttls-mschapv2* authentication method is being used. This property only has effect on Stations.
      name:
        type: str
        required: True
        description: Name of the security profile
      radius_called_format:
        type: str
        choices:
          - mac
          - mac:ssid
          - ssid
        default: mac:ssid
        description: Format of how the "called-id" identifier will be passed to RADIUS. When configuring radius server clients, you can specify "called-id" in order to separate multiple entires.
      radius_eap_accounting:
        type: bool
        default: False
        description: Explicitly enable accouting packets for radius-eap authentication
      radius_mac_accounting:
        type: bool
        default: False
        description: Explicitly enable accouting packets for radius-mac authentication
      radius_mac_authentication:
        type: bool
        default: False
        description: |
          This property affects the way how Access Point processes clients that are not found in the L(Access List, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#Access_List).
          - C(no) - allow or reject client authentication based on the value of L(default-authentication, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#General_interface_properties) property of the Wireless interface.
          - C(yes) - Query RADIUS server using MAC address of client as user name. With this setting the value of L(default-authentication, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#General_interface_properties) has no effect.
      radius_mac_caching:
        type: str
        choices:
          - disabled
          - time
        default: disabled
        description: If this value is set to time interval, the Access Point will cache RADIUS MAC authentication responses for specified time, and will not contact RADIUS server if matching cache entry already exists. Value *disabled* will disable cache, Access Point will always contact RADIUS server.
      radius_mac_format:
        type: str
        choices:
          - XX XX XX XX XX XX
          - XX-XX-XX-XX-XX-XX
          - XX:XX:XX:XX:XX:XX
          - XXXX:XXXX:XXXX
          - XXXXXX-XXXXXX
          - XXXXXX:XXXXXX
          - XXXXXXXXXXXX
        default: XX:XX:XX:XX:XX:XX
        description: Controls how MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
      radius_mac_mode:
        type: str
        choices:
          - as-username
          - as-username-and-password
        default: as-username
        description: By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to *as-username-and-password*, Access Point will use the same value for User-Password attribute as for the User-Name attribute.
      supplicant_identity:
        type: str
        default: L(Identity, https://wiki.mikrotik.com/wiki/Manual:System/identity)
        description: EAP identity that is sent by client at the beginning of EAP authentication. This value is used as a value for User-Name attribute in RADIUS messages sent by RADIUS EAP accounting and RADIUS EAP pass-through authentication.
      tls_certificate:
        type: str
        choices:
          - name
          - none
        description: Access Point always needs a certificate when configured when **tls-mode** is set to *verify-certificate*, or is set to *dont-verify-certificate*. Client needs a certificate only if Access Point is configured with **tls-mode** set to *verify-certificate*. In this case client needs a valid certificate that is signed by a CA known to the Access Point. This property only has effect when **tls-mode** is not set to *no-certificates* and **eap-methods** contains *eap-tls*.
      tls_mode:
        type: str
        choices:
          - dont-verify-certificate
          - no-certificates
          - verify-certificate
          - verify-certificate-with-crl
        default: no-certificates
        description: |
          This property has effect only when **eap-methods** contains *eap-tls*.
          - C(verify-certificate) - Require remote device to have valid certificate. Check that it is signed by known certificate authority. No additional identity verification is done. Certificate may include information about time period during which it is valid. If router has incorrect time and date, it may reject valid certificate because router's clock is outside that period. See also the L(Certificates, https://wiki.mikrotik.com/wiki/Manual:System/Certificates) configuration.
          - C(dont-verify-certificate) - Do not check certificate of the remote device. Access Point will not require client to provide certificate.
          - C(no-certificates) - Do not use certificates. TLS session is established using 2048 bit anonymous Diffie-Hellman key exchange.
          - C(verify-certificate-with-crl) - Same as *verify-certificate* but also checks if the certificate is valid by checking the Certificate Revocation List.
      unicast_ciphers:
        type: str
        choices:
          - aes-ccm
          - tkip
        default: aes-ccm
        description: Access Point advertises that it supports specified ciphers, multiple values can be selected. Client attempts connection only to Access Points that supports at least one of the specified ciphers. One of the ciphers will be used to encrypt unicast frames that are sent between Access Point and Station.
      wpa2_pre_shared_key:
        type: str
        description: WPA2 pre-shared key mode requires all devices in a BSS to have common secret key. Value of this key can be an arbitrary text. Commonly referred to as the network password for WPA2 mode. property only has effect when *wpa2-psk* is added to **authentication-types**.
      wpa_pre_shared_key:
        type: str
        description: WPA pre-shared key mode requires all devices in a BSS to have common secret key. Value of this key can be an arbitrary text. Commonly referred to as the network password for WPA mode. property only has effect when *wpa-psk* is added to **authentication-types**.
"""

EXAMPLES = """
# Using merged state
#
# before state:
# [admin@MikroTik] > /interface wireless security-profiles export
# /interface wireless security-profiles
# add name=test supplicant-identity=MikroTik
#
- name: Merge with device configuration
  kilip.routeros.ros_wireless_security_profiles:
    config:
      - name: test
        supplicant_identity: test
      - name: new
        supplicant_identity: new
    state: merged
#
# after state:
# [admin@MikroTik] > /interface wireless security-profiles export
# # RouterOS Output
# #
# /interface wireless security-profiles
# add name=test supplicant-identity=test
# add name=new supplicant-identity=new
#
#
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.interface.wireless.wireless_security_profiles import (
    WirelessSecurityProfilesResource,
)
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(
        argument_spec=WirelessSecurityProfilesResource.argument_spec
    )
    result = Config(module, WirelessSecurityProfilesResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
