#!/usr/bin/python


"""
The module file for ros_pppoe_client
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = """
module: ros_pppoe_client
short_description: Manage configuration for C(/interface pppoe-client)
description: This M(ros_pppoe_client) module provides management for RouterOS C(/interface pppoe-client).
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
options:
    state:
        choices:
            - merged
            - replaced
            - overridden
            - deleted
        default: merged
        description: |
            Merged:
            -  When Resource Exists:
               *  M(ros_pppoe_client) will update existing C(/interface pppoe-client) configuration
            -  When Resource Not Exists:
               *  M(ros_pppoe_client) will create new C(/interface pppoe-client),
            Replaced
            -  When Resource Exists:
               *  M(ros_pppoe_client) will restore related C(/interface pppoe-client) to its default value.
               *  M(ros_pppoe_client) will update C(/interface pppoe-client) item using the passed C(argument_spec).
            -  When Resource Not Exists:
               *  M(ros_pppoe_client) will create new C(/interface pppoe-client)
            Overridden:
            *  M(ros_pppoe_client) will remove any existing item in C(/interface pppoe-client)
            *  M(ros_pppoe_client) will create new item using value in the C(argument_spec)
            Deleted:
            ----
            *  If item exists M(ros_pppoe_client) will remove that item from C(/interface pppoe-client) configuration
    config:
        description: A dictionary for L(ros_pppoe_client)
        type: list
        elements: dict
        suboptions:
            ac_name:
                type: str
                description: |
                    Access Concentrator name, this may be left blank and the client will connect to
                    any access concentrator on the broadcast domain
            add_default_route:
                type: str
                default: no
                choices:
                    - yes
                    - no
                description: |
                    Enable/Disable whether to add default route automatically
            allow:
                type: list
                elements: str
                default:
                    - mschap2
                    - mschap1
                    - chap
                    - pap
                choices:
                    - mschap2
                    - mschap1
                    - chap
                    - pap
                description: |
                    allowed authentication methods, by default all methods are allowed
            default_route_distance:
                type: bytes
                description: |
                    sets distance value applied to auto created default route, if add-default-route
                    is also selected
            dial_on_demand:
                type: str
                default: no
                choices:
                    - yes
                    - no
                description: |
                    connects to AC only when outbound traffic is generated. If selected, then route
                    with gateway address from 10.112.112.0/24 network will be added while connection
                    is not established.
            interface:
                type: str
                description: |
                    interface name on which client will run
            keepalive_timeout:
                type: int
                description: |
                    Sets keepalive timeout in seconds.
            max_mru:
                type: str
                default: 1460
                description: |
                    Maximum Receive Unit
            max_mtu:
                type: str
                default: 1460
                description: |
                    Maximum Transmission Unit
            mrru:
                type: str
                ignore: true
                default: disabled
                description: |
                    maximum packet size that can be received on the link. If a packet is bigger than
                    tunnel MTU, it will be split into multiple packets, allowing full size IP or
                    Ethernet packets to be sent over the tunnel. C(<a
                    href="/wiki/Manual:MLPPP_over_single_and_multiple_links" title="Manual:MLPPP
                    over single and multiple links"> Read more >></a>)
            name:
                type: str
                required: True
                description: |
                    name of the PPPoE interface, generated by RouterOS if not specified
            password:
                type: str
                description: |
                    password used to authenticate
            profile:
                type: str
                default: default
                description: |
                    default profile for the connection defined in L( /ppp
                    profiles,/wiki/PPP_AAA#User_Profiles)
            service_name:
                type: str
                description: |
                    specifies the service name set on the access concentrator, can be left blank to
                    connect to any PPPoE server
            use_peer_dns:
                type: str
                default: no
                choices:
                    - yes
                    - no
                description: |
                    enable/disable getting DNS settings from the peer
            user:
                type: str
                description: |
                    username used for authentication

"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.interface.pppoe_client import PppoeClientResource
from ..module_utils.config.resource import ResourceConfig


def main():
    module = AnsibleModule(argument_spec=PppoeClientResource.argument_spec)
    result = ResourceConfig(module, PppoeClientResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
