#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/kilip/ansible-routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


"""
The module file for ros_bridge
"""

DOCUMENTATION = """
module: ros_bridge
author: Anthonius Munthi (@kilip)
short_description: Bridge Resource Module
description:
- This modules manages configuration in submenu `/interface bridge`.
version_added: 1.0.0
options:
  state:
    type: str
    choices: ["merged","replaced","overridden","deleted"]
    description: Set module state
    default: merged
  config:
    description: A dictionary of `/interface bridge` parameters
    type: list
    elements: dict
    suboptions:
        add_dhcp_option82:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Whether to add DHCP Option-82 information (Agent Remote ID and Agent Circuit ID)
            to DHCP packets. Can be used together with Option-82 capable DHCP server to
            assign IP addresses and implement policies. This property only has effect when
            dhcp-snooping is set to C(yes).

        admin_mac:
          type: str
          default: "none"
          description: |
            Static MAC address of the bridge. This property only has effect when auto-mac is
            set to C(no).

        ageing_time:
          type: str
          default: "00:05:00"
          description: |
            How long a host's information will be kept in the bridge database.

        arp:
          type: str
          choices:
            - 'disabled'
            - 'enabled'
            - 'proxy-arp'
            - 'reply-only'
          default: "enabled"
          description: |
            Address Resolution Protocol setting
            - C(disabled) - the interface will not use ARP
            - C(enabled) - the interface will use ARP
            - C(proxy-arp) - the interface will use the ARP proxy feature
            - C(reply-only) - the interface will only reply to requests originated from
              matching IP address/MAC address combinations which are entered as static entries
              in the [ IP/ARP](https://wiki.mikrotik.com/wiki/Manual:IP/ARP 'Manual:IP/ARP')
              table. No dynamic entries will be automatically stored in the [
              IP/ARP](https://wiki.mikrotik.com/wiki/Manual:IP/ARP 'Manual:IP/ARP') table.
              Therefore for communications to be successful, a valid static entry must already
              exist.

        arp_timeout:
          type: str
          default: "auto"
          description: |
            ARP timeout is time how long ARP record is kept in ARP table after no packets
            are received from IP. Value C(auto) equals to the value of arp-timeout in [
            IP/Settings](https://wiki.mikrotik.com/wiki/Manual:IP/Settings
            'Manual:IP/Settings'), default is 30s.

        auto_mac:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "yes"
          description: |
            Automatically select one MAC address of bridge ports as a bridge MAC address,
            bridge MAC will be chosen from the first added bridge port. After a device
            reboot, the bridge MAC can change depending on the port-number.

        comment:
          type: str

          description: |
            Short description of the interface.

        dhcp_snooping:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables or disables DHCP Snooping on the bridge.

        disabled:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Changes whether the bridge is disabled.

        ether_type:
          type: str
          choices:
            - '0x8100'
            - '0x88a8'
            - '0x9100'
          default: "0x8100"
          description: |
            Changes the EtherType, which will be used to determine if a packet has a VLAN
            tag. Packets that have a matching EtherType are considered as tagged packets.
            This property only has effect when vlan-filtering is set to C(yes).

        fast_forward:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "yes"
          description: |
            Special and faster case of [
            FastPath](https://wiki.mikrotik.com/wiki/Manual:Fast_Path 'Manual:Fast Path')
            which works only on bridges with 2 interfaces (enabled by default only for new
            bridges). More details can be found in the [ Fast
            Forward](https://wiki.mikrotik.com/wiki/Manual:Interface/Bridge#Fast_Forward
            'Manual:Interface/Bridge') section.

        forward_delay:
          type: str
          default: "00:00:15"
          description: |
            Time which is spent during the initialization phase of the bridge interface
            (i.e., after router startup or enabling the interface) in listening/learning
            state before the bridge will start functioning normally.

        frame_types:
          type: str
          choices:
            - 'admit-all'
            - 'admit-only-untagged-and-priority-tagged'
            - 'admit-only-vlan-tagged'
          default: "admit-all"
          description: |
            Specifies allowed frame types on a bridge port. This property only has effect
            when vlan-filtering is set to C(yes).

        igmp_snooping:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables multicast group and port learning to prevent multicast traffic from
            flooding all interfaces in a bridge.

        igmp_version:
          type: str
          choices:
            - '2'
            - '3'
          default: "2"
          description: |
            Selects the IGMP version in which IGMP general membership queries will be
            generated. This property only has effect when igmp-snooping is set to C(yes).

        ingress_filtering:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Enables or disables VLAN ingress filtering, which checks if the ingress port is
            a member of the received VLAN ID in the bridge VLAN table. By default, VLANs
            that don't exist in the bridge VLAN table are dropped before they are sent out
            (egress), but this property allows you to drop the packets when they are
            received (ingress). Should be used with frame-types to specify if the ingress
            traffic should be tagged or untagged. This property only has effect when
            vlan-filtering is set to C(yes).

        last_member_interval:
          type: str
          default: "1s"
          description: |
            If a port has fast-leave set to C(no) and a bridge port receives a IGMP Leave
            message, then a IGMP Snooping enabled bridge will send a IGMP query to make sure
            that no devices has subscribed to a certain multicast stream on a bridge port.
            If a IGMP Snooping enabled bridge does not receive a IGMP membership report
            after amount of last-member-interval, then the bridge considers that no one has
            subscribed to a certain multicast stream and can stop forwarding it. This
            property only has effect when igmp-snooping is set to C(yes).

        last_member_query_count:
          type: int
          default: 2
          description: |
            How many times should last-member-interval pass until a IGMP Snooping bridge
            will stop forwarding a certain multicast stream. This property only has effect
            when igmp-snooping is set to C(yes).

        max_hops:
          type: int
          default: 20
          description: |
            Bridge count which BPDU can pass in a MSTP enabled network in the same region
            before BPDU is being ignored. This property only has effect when protocol-mode
            is set to C(mstp).

        max_message_age:
          type: str
          default: "00:00:20"
          description: |
            How long to remember Hello messages received from other STP/RSTP enabled
            bridges. This property only has effect when protocol-mode is set to C(stp) or
            C(rstp).

        membership_interval:
          type: str
          default: "4m20s"
          description: |
            Amount of time after an entry in the Multicast Database (MDB) is removed if a
            IGMP membership report is not received on a certain port. This property only has
            effect when igmp-snooping is set to C(yes).

        mld_version:
          type: str
          choices:
            - '1'
            - '2'
          default: "1"
          description: |
            Selects the MLD version. Version 2 adds support for source-specific multicast.
            This property only has effect when RouterOS IPv6 package is enabled and
            igmp-snooping is set to C(yes).

        mtu:
          type: int

          description: |
            Maximum transmission unit, by default, the bridge will set MTU automatically and
            it will use the lowest MTU value of any associated bridge port. The default
            bridge MTU value without any bridge ports added is 1500. The MTU value can be
            set manually, but it cannot exceed the bridge L2MTU or the lowest bridge port
            L2MTU. If a new bridge port is added with L2MTU which is smaller than the
            actual-mtu of the bridge (set by the mtu property), then manually set value will
            be ignored and the bridge will act as if C(mtu=auto) is set.

        multicast_querier:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Multicast querier generates IGMP general membership queries to which all IGMP
            capable devices respond with a IGMP membership report, usually a PIM (multicast)
            router generates these queries. By using this property you can make a IGMP
            Snooping enabled bridge to generate IGMP general membership queries. This
            property should be used whenever there is no PIM (multicast) router in a Layer2
            network or IGMP packets must be sent through multiple IGMP Snooping enabled
            bridges to reach a PIM (multicast) router. Without a multicast querier in a
            Layer2 network the Multicast Database (MDB) is not being updated and IGMP
            Snooping will not function properly. Only untagged IGMP general membership
            queries are generated. This property only has effect when igmp-snooping is set
            to C(yes). Additionally, the igmp-snooping should be disabled/enabled after
            changing multicast-querier property.

        multicast_router:
          type: str
          choices:
            - 'disabled'
            - 'permanent'
            - 'temporary-query'
          default: "temporary-query"
          description: |
            Changes the state of a bridge itself if IGMP membership reports are going to be
            forwarded to it. This property can be used to forward IGMP membership reports to
            the bridge for statistics or to analyse them.
            - C(disabled) - IGMP membership reports are not forwarded to the bridge itself
              regardless what is connected to it.
            - C(permanent) - IGMP membership reports are forwarded through this the bridge
              itself regardless what is connected to it.
            - C(temporary-query) - automatically detect multicast routers and IGMP Snooping
              enabled bridges. This property only has effect when igmp-snooping is set to
              C(yes).

        name:
          type: str
          required: True

          description: |
            Name of the bridge interface

        priority:
          type: int
          default: 32768
          description: |
            Bridge priority, used by STP to determine root bridge, used by MSTP to determine
            CIST and IST regional root bridge. This property has no effect when
            protocol-mode is set to C(none).

        protocol_mode:
          type: str
          choices:
            - 'mstp'
            - 'none'
            - 'rstp'
            - 'stp'
          default: "rstp"
          description: |
            Select Spanning tree protocol (STP) or Rapid spanning tree protocol (RSTP) to
            ensure a loop-free topology for any bridged LAN. RSTP provides for faster
            spanning tree convergence after a topology change. Select MSTP to ensure
            loop-free topology across multiple VLANs. Since RouterOS v6.43 it is possible to
            forward Reserved MAC addresses that are in **01:80:C2:00:00:0X** range, this can
            be done by setting the protocol-mode to C(none).

        pvid:
          type: int
          default: 1
          description: |
            Port VLAN ID (pvid) specifies which VLAN the untagged ingress traffic is
            assigned to. It applies e.g. to frames sent from bridge IP and destined to a
            bridge port. This property only has effect when vlan-filtering is set to C(yes).

        querier_interval:
          type: str
          default: "4m15s"
          description: |
            Used to change the interval how often a bridge checks if it is the active
            multicast querier. This property only has effect when igmp-snooping and
            multicast-querier is set to C(yes).

        query_interval:
          type: str
          default: "2m5s"
          description: |
            Used to change the interval how often IGMP general membership queries are sent
            out. This property only has effect when igmp-snooping and multicast-querier is
            set to C(yes).

        query_response_interval:
          type: str
          default: "10s"
          description: |
            Interval in which a IGMP capable device must reply to a IGMP query with a IGMP
            membership report. This property only has effect when igmp-snooping and
            multicast-querier is set to C(yes).

        region_name:
          type: str

          description: |
            MSTP region name. This property only has effect when protocol-mode is set to
            C(mstp).

        region_revision:
          type: int

          description: |
            MSTP configuration revision number. This property only has effect when
            protocol-mode is set to C(mstp).

        startup_query_count:
          type: int
          default: 2
          description: |
            Specifies how many times must startup-query-interval pass until the bridge
            starts sending out IGMP general membership queries periodically. This property
            only has effect when igmp-snooping and multicast-querier is set to C(yes).

        startup_query_interval:
          type: str
          default: "31s250ms"
          description: |
            Used to change the amount of time after a bridge starts sending out IGMP general
            membership queries after the bridge is enabled. This property only has effect
            when igmp-snooping and multicast-querier is set to C(yes).

        transmit_hold_count:
          type: int
          default: 6
          description: |
            The Transmit Hold Count used by the Port Transmit state machine to limit
            transmission rate.

        vlan_filtering:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Globally enables or disables VLAN functionality for bridge.

"""

EXAMPLES = """
# ----
# Using Merged
# ----
# before:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="trunk bridge" name=br-trunk arp=reply-only
# add comment="wan bridge" name=br-wan arp=reply-only
#
# configuration:
- name: Merge configuration with device configuration
  kilip.routeros.ros_bridge:
    config:
      - name: br-wan
        comment: 'updated comment'
      - name: br-trunk
        comment: 'updated comment'
        vlan_filtering: true
    state: merged

#
# after:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="trunk bridge" name=br-trunk vlan-filtering=yes arp=enabled
# add comment="wan bridge" name=br-wan arp=enabled
# ----
# Using Replaced
# ----
# before:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="trunk bridge" name=br-trunk arp=reply-only
# add comment="wan bridge" name=br-wan arp=reply-only
#
# configuration:
- name: Replace device configuration
  kilip.routeros.ros_bridge:
    config:
      - name: br-wan
        comment: 'replaced comment'
      - name: br-trunk
        comment: 'replaced comment'
    state: replaced

#
# after:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="replaced comment" name=br-trunk arp=enabled
# add comment="replaced comment" name=br-wan arp=enabled
# ----
# Using Overridden
# ----
# before:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="trunk bridge" name=br-trunk arp=reply-only
# add comment="wan bridge" name=br-wan arp=reply-only
#
# configuration:
- name: Override bridge configuration
  kilip.routeros.ros_bridge:
    config:
      - name: br-new
        comment: 'new bridge'
    state: overridden

#
# after:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# # All existing bridge will be removed and replaced with the new configuration.
# /interface bridge
# add comment="new bridge" name=br-new
# ----
# Using deleted state
# ----
# before:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# /interface bridge
# add comment="trunk bridge" name=br-trunk arp=reply-only
# add comment="wan bridge" name=br-wan arp=reply-only
#
# configuration:
- name: Delete bridge
  kilip.routeros.ros_bridge:
    config:
      - name: br-trunk
      - name: br-wan
    state: deleted

#
# after:
# [admin@MikroTik] > /interface bridge export
# sep/06/2020 03:08:16 by RouterOS 6.47.2
# software id =
# # All existing bridge will be removed and replaced with the new configuration.
# # empty bridge config
"""

RETURN = """
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['/interface bridge add name=sample']
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.bridge.bridge import BridgeResource
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=BridgeResource.argument_spec)
    result = Config(module, BridgeResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
