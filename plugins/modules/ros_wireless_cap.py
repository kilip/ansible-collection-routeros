#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/kilip/ansible-routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


"""
The module file for ros_wireless_cap
"""

DOCUMENTATION = """
module: ros_wireless_cap
author: Anthonius Munthi (@kilip)
short_description: Wireless CAP Setting
description:
- This module manages the Wireless CAP setting of Mikrotik RouterOS network devices.
version_added: 1.0.0
options:
  state:
    type: str
    choices: ["present","reset"]
    description: Set module state
    default: present
  config:
    description: A dictionary of `/interface wireless cap` parameters
    type: dict
    suboptions:
        bridge:
          type: str
          default: "none"
          description: |
            Bridge to which interfaces should be added when local forwarding mode is used

        caps_man_addresses:
          type: list
          elements: "str"

          description: |
            List of Manager IP addresses that CAP will attempt to contact during discovery

        caps_man_certificate_common_names:
          type: list
          elements: "str"

          description: |
            List of Manager certificate CommonNames that CAP will connect to, if empty - CAP
            does not check Manager certificate CommonName

        caps_man_names:
          type: list
          elements: "str"

          description: |
            An ordered list of CAPs Manager names that the CAP will connect to, if empty -
            CAP does not check Manager name

        certificate:
          type: str
          default: "none"
          description: |
            Certificate to use for authenticating

        discovery_interfaces:
          type: list
          elements: "str"

          description: |
            List of interfaces over which CAP should attempt to discover Manager

        enabled:
          type: str
          choices:
            - 'no'
            - 'yes'
          default: "no"
          description: |
            Disable or enable CAP feature

        interfaces:
          type: list
          elements: "str"

          description: |
            List of wireless interfaces to be controlled by Manager

        static_virtual:
          type: str
          choices:
            - 'yes'
            - 'no'
          default: "no"
          description: |
            CAP will create Static Virtual Interfaces instead of Dynamic and will try to
            reuse the same interface on reconnect to CAPsMAN if the MAC address will be the
            same. Note if two or more interfaces will have the same MAC address the
            assignment from the CAPsMAN could be random between those interfaces.

"""

EXAMPLES = """
# ----
# Change Wireless CAP Setting
# ----
# before:
#  /interface wireless cap
#  set interface=wlan1,wlan2
#
- name: Configure Wireless CAP
  kilip.routeros.ros_wireless_cap:
    config:
      interfaces:
        - wlan1
        - wlan2
    state: present

# after:
#  /interface wireless cap
#  set interface=wlan-new
"""

RETURN = """
before:
  description: The configuration as structured data prior to module invocation.
  returned: always
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
after:
  description: The configuration as structured data after module completion.
  returned: when changed
  type: list
  sample: The configuration returned will always be in the same format of the parameters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['/interface bridge add name=sample']
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.wireless.wireless_cap import WirelessCapResource
from ..module_utils.config.setting import Setting


def main():
    module = AnsibleModule(argument_spec=WirelessCapResource.argument_spec)
    result = Setting(module, WirelessCapResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
