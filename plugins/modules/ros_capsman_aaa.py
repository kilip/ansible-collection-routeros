#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = """
module: ros_capsman_aaa
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
short_description: CAPsMan AAA Configuration Module
description:
  - This modules manages CAPsMan AAA configuration on Mikrotik RouterOS network devices
supports:
  - export-verbose-mode
options:
  state:
    choices:
      - present
      - reset
    default: present
    description: Set state for this module
  config:
    type: dict
    suboptions:
      called_format:
        type: str
        choices:
          - mac
          - mac:ssid
          - ssid
        default: mac:ssid
        description: Format of how the "called-id" identifier will be passed to RADIUS. When configuring radius server clients, you can specify "called-id" in order to separate multiple entires.
      interim_update:
        type: str
        default: disabled
        description: When RADIUS accounting is used, Access Point periodically sends accounting information updates to the RADIUS server. This property specifies default update interval that can be overridden by the RADIUS server using the L(Acct-Interim-Interval, https://wiki.mikrotik.com/wiki/Manual:Interface/Wireless#RADIUS_MAC_authentication) attribute.
      mac_caching:
        type: str
        default: disabled
        description: If this value is set to time interval, the Access Point will cache RADIUS MAC authentication responses for specified time, and will not contact RADIUS server if matching cache entry already exists. Value disabled will disable cache, Access Point will always contact RADIUS server.
      mac_format:
        type: str
        default: XX:XX:XX:XX:XX:XX
        description: Controls how MAC address of the client is encoded by Access Point in the User-Name attribute of the MAC authentication and MAC accounting RADIUS requests.
      mac_mode:
        type: str
        choices:
          - as-username
          - as-username-and-password
        description: By default Access Point uses an empty password, when sending Access-Request during MAC authentication. When this property is set to as-username-and-password, Access Point will use the same value for User-Password attribute as for the User-Name attribute.
"""

EXAMPLES = """
# Using present state
#
# before state:
# [admin@MikroTik] > /caps-man aaa export
# /caps-man aaa
# set called-format=mac:ssid interim-update=disabled mac-caching=disabled mac-format=XX.XX.XX.XX.XX.XX mac-mode=as-username
#
- name: Change configuration
  kilip.routeros.ros_capsman_aaa:
    config:
      called_format: mac
      interim_update: 10s
      mac_caching: 10m
      mac_format: XX-XX-XX-XX-XX-XX
      mac_mode: as-username-and-password
    state: present
#
# after state:
# [admin@MikroTik] > /caps-man aaa export
# # RouterOS Output
# #
# /caps-man aaa
# set called-format=mac interim-update=10s mac-caching=10m mac-format=XX-XX-XX-XX-XX-XX mac-mode=as-username-and-password
#
#
# Using reset state
#
# before state:
# [admin@MikroTik] > /caps-man aaa export
# /caps-man aaa
# set called-format=mac:ssid interim-update=disabled mac-caching=disabled mac-format=XX.XX.XX.XX.XX.XX mac-mode=as-username
#
- name: Reset to default value
  kilip.routeros.ros_capsman_aaa:
    state: reset
#
# after state:
# [admin@MikroTik] > /caps-man aaa export
# # RouterOS Output
# #
# /caps-man aaa
# set mac-format=XX:XX:XX:XX:XX:XX
#
#
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.capsman.capsman_aaa import CapsmanAaaResource
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=CapsmanAaaResource.argument_spec)
    result = Config(module, CapsmanAaaResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
